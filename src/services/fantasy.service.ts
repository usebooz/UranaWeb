import type {
  League,
  Tour,
  LeagueSquads,
  LeagueSquadsPlayers,
  TourMatches,
} from '@/gql';
import { FantasyTourStatus, MatchStatus } from '@/gql/generated/graphql';
import { BadgeProps } from '@telegram-apps/telegram-ui';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å fantasy –¥–∞–Ω–Ω—ã–º–∏
 */
export class FantasyService {
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä –∏–∑ –ª–∏–≥–∏
   * @param league - –¥–∞–Ω–Ω—ã–µ –ª–∏–≥–∏
   * @returns ID —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–∞ –∏–ª–∏ null
   */
  static getCurrentTourId(league: League): string | undefined {
    return league?.season?.currentTour?.id;
  }

  /**
   *
   * @param league - –¥–∞–Ω–Ω—ã–µ –ª–∏–≥–∏
   * @param tour
   * @returns
   */
  static isTourCurrent(league: League, tour: Tour): boolean {
    return tour?.id === league?.season?.currentTour?.id;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –ª–∏–≥–∏
   * @param league - –¥–∞–Ω–Ω—ã–µ –ª–∏–≥–∏
   * @returns ID —Å–µ–∑–æ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  static getSeasonId(league: League): string | undefined {
    return league?.season?.id;
  }

  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤
   * @param league - –¥–∞–Ω–Ω—ã–µ –ª–∏–≥–∏
   * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤
   */
  static getToursHeader(league: League): string | undefined {
    if (!league) {
      return undefined;
    }

    const toursCount = league?.season.tours.filter(
      tour => tour.status === FantasyTourStatus.Finished
    ).length;

    return `–¢—É—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${toursCount}`;
  }

  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ + —Ç–µ–∫—É—â–∏–π)
   * @param league - –¥–∞–Ω–Ω—ã–µ –ª–∏–≥–∏
   * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   */
  static getAvailableToursCount(league: League): number {
    return (
      league?.season.tours.filter(
        tour =>
          tour.status === FantasyTourStatus.Finished ||
          tour.status === FantasyTourStatus.InProgress ||
          tour.status === FantasyTourStatus.Opened
      ).length || 0
    );
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç—É—Ä–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (—É–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–æ "—Ç—É—Ä")
   * @param tour - –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞
   * @returns –Ω–æ–º–µ—Ä —Ç—É—Ä–∞ –∫–∞–∫ —á–∏—Å–ª–æ
   */
  static getTourNumber(tour: Tour): number {
    if (!tour) {
      return 0;
    }
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–∞
    const regex = /\d+/;
    const match = regex.exec(tour.name);
    return match ? parseInt(match[0], 10) : 0;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—É—Ä –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param league - –¥–∞–Ω–Ω—ã–µ –ª–∏–≥–∏
   * @param page - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1-based)
   * @returns –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—É—Ä –∏–ª–∏ undefined
   */
  static getTourByPage(league: League, page: number): Tour | undefined {
    return league?.season?.tours?.[page - 1];
  }

  /**
   *
   * @param leagueSquad
   * @returns
   */
  static getTopPercent(leagueSquad: LeagueSquads[0]): string | undefined {
    if (!leagueSquad.scoreInfo?.topPercent) {
      return undefined;
    }
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–∞
    const regex = /\d+/;
    const match = regex.exec(leagueSquad.scoreInfo.topPercent);
    return (match ? match[0] : '0') + '%';
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
   * @param tour
   * @returns —á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
   */
  static getTourStatusHint(tour: Tour): string | undefined {
    switch (tour?.status) {
      case FantasyTourStatus.Finished:
        return '–∑–∞–∫–æ–Ω—á–µ–Ω';
      case FantasyTourStatus.InProgress:
        return '–∏–¥–µ—Ç';
      case FantasyTourStatus.Opened:
        return '–Ω–µ –Ω–∞—á–∞—Ç';
      default:
        return undefined;
    }
  }

  /**
   *
   * @param tour
   * @returns
   */
  static isTourInProgress(tour: Tour): boolean {
    return tour?.status === FantasyTourStatus.InProgress;
  }

  /**
   *
   * @param tour
   * @returns
   */
  static isTourOpened(tour: Tour): boolean {
    return tour?.status === FantasyTourStatus.Opened;
  }

  /**
   *
   * @param tourMatches
   * @returns
   */
  static getPlayedMatchesCount(tourMatches?: TourMatches): string | undefined {
    if (!tourMatches) {
      return undefined;
    }

    const totalMatches = tourMatches.length;
    const playedMatches = tourMatches.filter(
      match =>
        match.matchStatus === MatchStatus.Closed ||
        match.matchStatus === MatchStatus.Ended
    ).length;

    return `—Å—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π ${playedMatches}/${totalMatches}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ —Ç—É—Ä–∞
   * @param leagueSquads - —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –ª–∏–≥–∏
   * @returns —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –∏–ª–∏ undefined
   */
  static getTourWinner(leagueSquads?: LeagueSquads): string | undefined {
    const winner = leagueSquads?.find(squad => squad.scoreInfo.place === 1);
    if (!winner) {
      return undefined;
    }
    return `üëë ${winner.squad.user.nick}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–∞
   * @param tour - –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞
   * @returns –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π —Å—Ç–∞—Ä—Ç–∞ –∏–ª–∏ undefined
   */
  static formatTourStartDate(tour: Tour): string | undefined {
    if (!tour?.startedAt || typeof tour.startedAt !== 'string') {
      return undefined;
    }

    const startDate = new Date(tour.startedAt);
    const formatter = new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: 'long',
      hour: '2-digit',
      minute: '2-digit',
    });
    return `—Å—Ç–∞—Ä—Ç—É–µ—Ç ${formatter.format(startDate)}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥
   * @param leagueSquads - –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥ –ª–∏–≥–∏
   * @returns
   */
  static getAverageScore(
    tour: Tour,
    leagueSquads?: LeagueSquads
  ): string | undefined {
    if (FantasyService.isTourOpened(tour)) {
      return '–û—á–∫–∏';
    }
    if (!leagueSquads) {
      return '0';
    }
    const firstSquad = leagueSquads[0];
    return '‚àÖ' + (firstSquad?.scoreInfo?.averageScore ?? '0');
  }

  /**
   *
   * @param tour
   * @returns
   */
  static getAverageSubtitle(tour: Tour): string {
    return FantasyService.isTourOpened(tour) ? '–∑–∞ —Å–µ–∑–æ–Ω' : '–∑–∞ —Ç—É—Ä';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
   * @param leagueSquads - –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥ –ª–∏–≥–∏
   * @returns –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ 0
   */
  static getSquadsHeader(leagueSquads?: LeagueSquads): string | undefined {
    const firstSquad = leagueSquads?.[0];
    const squadsCount = firstSquad?.scoreInfo?.totalPlaces ?? 0;
    return `–ö–æ–º–∞–Ω–¥ —É—á–∞—Å—Ç–≤—É–µ—Ç: ${squadsCount}`;
  }

  /**
   *
   * @param leagueSquad
   * @returns
   */
  static isSquadPlaceDiffNegative(leagueSquad: LeagueSquads[0]): boolean {
    return leagueSquad.scoreInfo.placeAfterTourDiff < 0;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ—Å—Ç –¥–ª—è subtitle
   * @param leagueSquad
   * @returns –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º + –∏–ª–∏ -
   */
  static getSquadPlaceDiff(leagueSquad: LeagueSquads[0]): string | undefined {
    if (!leagueSquad.scoreInfo.placeAfterTourDiff) return undefined;
    return this.isSquadPlaceDiffNegative(leagueSquad)
      ? `${leagueSquad.scoreInfo.placeAfterTourDiff}`
      : `+${leagueSquad.scoreInfo.placeAfterTourDiff}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥—ã —Å –≤–µ–¥—É—â–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
   * @param leagueSquad - –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
   * @returns –º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥—ã —Å –≤–µ–¥—É—â–∏–º–∏ &nbsp; –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω—ã
   */
  static getSquadPlace(tour: Tour, leagueSquad: LeagueSquads[0]): string {
    const place = FantasyService.isTourOpened(tour)
      ? leagueSquad.scoreInfo.place.toString()
      : leagueSquad.scoreInfo.placeAfterTour.toString();
    const totalPlaces = leagueSquad.scoreInfo.totalPlaces.toString();
    const targetWidth = totalPlaces.length;
    const currentWidth = place.length;

    if (currentWidth >= targetWidth) {
      return place;
    }

    const spacesNeeded = targetWidth - currentWidth;
    const leadingSpaces = '&nbsp;'.repeat(spacesNeeded);

    return `${leadingSpaces}${place}`;
  }

  /**
   *
   * @param tour
   * @param leagueSquad
   * @returns
   */
  static getSquadBadgeMode(
    tour: Tour,
    leagueSquad: LeagueSquads[0]
  ): BadgeProps['mode'] {
    if (FantasyService.isTourOpened(tour)) return 'secondary';
    return this.isSquadPlaceDiffNegative(leagueSquad) ? 'critical' : 'primary';
  }

  /**
   *
   * @param tour
   * @param leagueSquad
   * @returns
   */
  static getSquadBadge(
    tour: Tour,
    leagueSquad: LeagueSquads[0]
  ): string | undefined {
    return FantasyService.isTourOpened(tour)
      ? FantasyService.getTopPercent(leagueSquad)
      : FantasyService.getSquadPlaceDiff(leagueSquad);
  }

  /**
   *
   * @param squadPlayers
   * @returns
   */
  static getSquadDescription(
    squadPlayers?: LeagueSquadsPlayers[0]
  ): string | undefined {
    if (!squadPlayers?.squad.currentTourInfo) {
      return undefined;
    }

    const transfersDone =
      squadPlayers.squad.currentTourInfo.transfersDone.toString();
    const transfersTotal = squadPlayers.squad.currentTourInfo.isNotLimit
      ? '‚ôæÔ∏è'
      : (
          squadPlayers.squad.currentTourInfo.transfersDone +
          Number(squadPlayers.squad.currentTourInfo.transfersLeft)
        ).toString();
    return 'üîÑ' + transfersDone + '/' + transfersTotal;
  }

  /**
   *
   * @param squadPlayers
   * @returns
   */
  static getSquadSubtitle(
    squadPlayers?: LeagueSquadsPlayers[0]
  ): string | undefined {
    if (!squadPlayers?.squad.currentTourInfo) {
      return undefined;
    }
  }

  /**
   *
   * @param leagueSquad - –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
   * @param tour - –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞
   * @returns
   */
  static getTourScore(tour: Tour, leagueSquad: LeagueSquads[0]): string {
    if (!FantasyService.isTourOpened(tour)) {
      return leagueSquad.scoreInfo.score.toString();
    }

    return '‚àÖ' + (leagueSquad.scoreInfo.averageScore?.toString() ?? '0');
  }

  /**
   *
   * @param leagueSquad - –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
   * @param tour - –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞
   * @returns
   */
  static getSeasonScore(tour: Tour, leagueSquad: LeagueSquads[0]): string {
    if (FantasyService.isTourOpened(tour)) {
      return leagueSquad.scoreInfo.score.toString();
    }

    return leagueSquad.scoreInfo.pointsAfterTour.toString();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç subtitle –¥–ª—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ —Ç—É—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
   * @param tour - –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞
   * @param leagueSquads - —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è)
   * @returns —Ç–µ–∫—Å—Ç –¥–ª—è subtitle
   */
  static getTourSubtitle(
    tour: Tour,
    tourMathes?: TourMatches,
    leagueSquads?: LeagueSquads
  ): string | undefined {
    if (!tour) return undefined;

    switch (tour.status) {
      case FantasyTourStatus.Finished: {
        return this.getTourWinner(leagueSquads);
      }
      case FantasyTourStatus.InProgress: {
        return this.getPlayedMatchesCount(tourMathes);
      }
      case FantasyTourStatus.Opened: {
        return this.formatTourStartDate(tour);
      }
      default: {
        return undefined;
      }
    }
  }
}
