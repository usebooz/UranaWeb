/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetLeague($id: ID!) {\n    fantasyQueries {\n      league(source: ID, id: $id) {\n        id\n        name\n        type\n        season {\n          id\n          isActive\n          tournament {\n            id\n            webName\n          }\n          tours {\n            name\n            id\n            status\n          }\n          currentTour {\n            id\n            name\n            status\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetLeagueDocument,
    "\n  query GetLeagueSquads(\n    $leagueId: ID!\n    $entityType: FantasyRatingEntityType!\n    $entityId: ID!\n  ) {\n    fantasyQueries {\n      rating {\n        squads(\n          input: {\n            leagueID: $leagueId\n            entityType: $entityType\n            entityID: $entityId\n            sortOrder: ASC\n            pageSize: 90\n            pageNum: 1\n          }\n        ) {\n          list {\n            scoreInfo {\n              place\n              score\n              totalPlaces\n              averageScore\n              placeDiff\n              placeAfterTour\n              pointsAfterTour\n              placeAfterTourDiff\n            }\n            squad {\n              name\n              id\n              user {\n                id\n                nick\n              }\n              benefit {\n                benefitType\n                isApply\n                isActive\n              }\n              seasonScoreInfo {\n                score\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetLeagueSquadsDocument,
    "\n  query GetLeagueSquadsCurrentTourInfo($leagueId: ID!, $seasonId: ID!) {\n    fantasyQueries {\n      rating {\n        squads(\n          input: {\n            leagueID: $leagueId\n            entityType: SEASON\n            entityID: $seasonId\n            sortOrder: ASC\n            pageSize: 90\n            pageNum: 1\n          }\n        ) {\n          list {\n            squad {\n              id\n              currentTourInfo {\n                isNotLimit\n                transfersDone\n                transfersLeft\n                currentBalance\n                totalPrice\n                players {\n                  isCaptain\n                  isViceCaptain\n                  isStarting\n                  substitutePriority\n                  points\n                  score\n                  isPointsCount\n                  playedMatchesTour\n                  seasonPlayer {\n                    id\n                    name\n                    role\n                    status {\n                      status\n                    }\n                    statObject {\n                      id\n                      firstName\n                      lastName\n                    }\n                    team {\n                      id\n                      name\n                      statObject {\n                        id\n                      }\n                      svgKit {\n                        url\n                      }\n                    }\n                  }\n                  statPlayer {\n                    points\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetLeagueSquadsCurrentTourInfoDocument,
    "\n  query GetSquadTourInfo($tourId: ID!, $squadId: ID!) {\n    fantasyQueries {\n      squadTourInfo(input: { tourID: $tourId, squadID: $squadId }) {\n        isNotLimit\n        transfersDone\n        transfersLeft\n        currentBalance\n        totalPrice\n        players {\n          isCaptain\n          isViceCaptain\n          isStarting\n          substitutePriority\n          points\n          score\n          isPointsCount\n          playedMatchesTour\n          seasonPlayer {\n            id\n            name\n            role\n            status {\n              status\n            }\n            statObject {\n              id\n              firstName\n              lastName\n            }\n            team {\n              id\n              name\n              statObject {\n                id\n              }\n              svgKit {\n                url\n              }\n            }\n          }\n          statPlayer {\n            points\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSquadTourInfoDocument,
    "\n  query GetTour($id: ID!) {\n    fantasyQueries {\n      tour(id: $id) {\n        id\n        name\n        status\n        startedAt\n        finishedAt\n        transfersStartedAt\n        transfersFinishedAt\n      }\n    }\n  }\n": typeof types.GetTourDocument,
    "\n  query GetTourMatches($id: ID!) {\n    fantasyQueries {\n      tour(id: $id) {\n        id\n        matches {\n          id\n          matchStatus\n          scheduledAt\n          currentTime\n          winner\n          periodId\n          hasLineups\n          home {\n            score\n            team {\n              id\n              name\n              logo {\n                main\n              }\n            }\n            lineup(skipPreview: true) {\n              player {\n                id\n              }\n              lineupStarting\n            }\n          }\n          away {\n            score\n            team {\n              id\n              name\n              logo {\n                main\n              }\n            }\n            lineup(skipPreview: true) {\n              player {\n                id\n              }\n              lineupStarting\n            }\n          }\n          prediction {\n            yellowCards\n            goals\n          }\n          bettingOdds(iso2Country: \"\", placementType: FANTASY_MATCH) {\n            line1x2 {\n              h\n              a\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetTourMatchesDocument,
};
const documents: Documents = {
    "\n  query GetLeague($id: ID!) {\n    fantasyQueries {\n      league(source: ID, id: $id) {\n        id\n        name\n        type\n        season {\n          id\n          isActive\n          tournament {\n            id\n            webName\n          }\n          tours {\n            name\n            id\n            status\n          }\n          currentTour {\n            id\n            name\n            status\n          }\n        }\n      }\n    }\n  }\n": types.GetLeagueDocument,
    "\n  query GetLeagueSquads(\n    $leagueId: ID!\n    $entityType: FantasyRatingEntityType!\n    $entityId: ID!\n  ) {\n    fantasyQueries {\n      rating {\n        squads(\n          input: {\n            leagueID: $leagueId\n            entityType: $entityType\n            entityID: $entityId\n            sortOrder: ASC\n            pageSize: 90\n            pageNum: 1\n          }\n        ) {\n          list {\n            scoreInfo {\n              place\n              score\n              totalPlaces\n              averageScore\n              placeDiff\n              placeAfterTour\n              pointsAfterTour\n              placeAfterTourDiff\n            }\n            squad {\n              name\n              id\n              user {\n                id\n                nick\n              }\n              benefit {\n                benefitType\n                isApply\n                isActive\n              }\n              seasonScoreInfo {\n                score\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetLeagueSquadsDocument,
    "\n  query GetLeagueSquadsCurrentTourInfo($leagueId: ID!, $seasonId: ID!) {\n    fantasyQueries {\n      rating {\n        squads(\n          input: {\n            leagueID: $leagueId\n            entityType: SEASON\n            entityID: $seasonId\n            sortOrder: ASC\n            pageSize: 90\n            pageNum: 1\n          }\n        ) {\n          list {\n            squad {\n              id\n              currentTourInfo {\n                isNotLimit\n                transfersDone\n                transfersLeft\n                currentBalance\n                totalPrice\n                players {\n                  isCaptain\n                  isViceCaptain\n                  isStarting\n                  substitutePriority\n                  points\n                  score\n                  isPointsCount\n                  playedMatchesTour\n                  seasonPlayer {\n                    id\n                    name\n                    role\n                    status {\n                      status\n                    }\n                    statObject {\n                      id\n                      firstName\n                      lastName\n                    }\n                    team {\n                      id\n                      name\n                      statObject {\n                        id\n                      }\n                      svgKit {\n                        url\n                      }\n                    }\n                  }\n                  statPlayer {\n                    points\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetLeagueSquadsCurrentTourInfoDocument,
    "\n  query GetSquadTourInfo($tourId: ID!, $squadId: ID!) {\n    fantasyQueries {\n      squadTourInfo(input: { tourID: $tourId, squadID: $squadId }) {\n        isNotLimit\n        transfersDone\n        transfersLeft\n        currentBalance\n        totalPrice\n        players {\n          isCaptain\n          isViceCaptain\n          isStarting\n          substitutePriority\n          points\n          score\n          isPointsCount\n          playedMatchesTour\n          seasonPlayer {\n            id\n            name\n            role\n            status {\n              status\n            }\n            statObject {\n              id\n              firstName\n              lastName\n            }\n            team {\n              id\n              name\n              statObject {\n                id\n              }\n              svgKit {\n                url\n              }\n            }\n          }\n          statPlayer {\n            points\n          }\n        }\n      }\n    }\n  }\n": types.GetSquadTourInfoDocument,
    "\n  query GetTour($id: ID!) {\n    fantasyQueries {\n      tour(id: $id) {\n        id\n        name\n        status\n        startedAt\n        finishedAt\n        transfersStartedAt\n        transfersFinishedAt\n      }\n    }\n  }\n": types.GetTourDocument,
    "\n  query GetTourMatches($id: ID!) {\n    fantasyQueries {\n      tour(id: $id) {\n        id\n        matches {\n          id\n          matchStatus\n          scheduledAt\n          currentTime\n          winner\n          periodId\n          hasLineups\n          home {\n            score\n            team {\n              id\n              name\n              logo {\n                main\n              }\n            }\n            lineup(skipPreview: true) {\n              player {\n                id\n              }\n              lineupStarting\n            }\n          }\n          away {\n            score\n            team {\n              id\n              name\n              logo {\n                main\n              }\n            }\n            lineup(skipPreview: true) {\n              player {\n                id\n              }\n              lineupStarting\n            }\n          }\n          prediction {\n            yellowCards\n            goals\n          }\n          bettingOdds(iso2Country: \"\", placementType: FANTASY_MATCH) {\n            line1x2 {\n              h\n              a\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetTourMatchesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLeague($id: ID!) {\n    fantasyQueries {\n      league(source: ID, id: $id) {\n        id\n        name\n        type\n        season {\n          id\n          isActive\n          tournament {\n            id\n            webName\n          }\n          tours {\n            name\n            id\n            status\n          }\n          currentTour {\n            id\n            name\n            status\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLeague($id: ID!) {\n    fantasyQueries {\n      league(source: ID, id: $id) {\n        id\n        name\n        type\n        season {\n          id\n          isActive\n          tournament {\n            id\n            webName\n          }\n          tours {\n            name\n            id\n            status\n          }\n          currentTour {\n            id\n            name\n            status\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLeagueSquads(\n    $leagueId: ID!\n    $entityType: FantasyRatingEntityType!\n    $entityId: ID!\n  ) {\n    fantasyQueries {\n      rating {\n        squads(\n          input: {\n            leagueID: $leagueId\n            entityType: $entityType\n            entityID: $entityId\n            sortOrder: ASC\n            pageSize: 90\n            pageNum: 1\n          }\n        ) {\n          list {\n            scoreInfo {\n              place\n              score\n              totalPlaces\n              averageScore\n              placeDiff\n              placeAfterTour\n              pointsAfterTour\n              placeAfterTourDiff\n            }\n            squad {\n              name\n              id\n              user {\n                id\n                nick\n              }\n              benefit {\n                benefitType\n                isApply\n                isActive\n              }\n              seasonScoreInfo {\n                score\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLeagueSquads(\n    $leagueId: ID!\n    $entityType: FantasyRatingEntityType!\n    $entityId: ID!\n  ) {\n    fantasyQueries {\n      rating {\n        squads(\n          input: {\n            leagueID: $leagueId\n            entityType: $entityType\n            entityID: $entityId\n            sortOrder: ASC\n            pageSize: 90\n            pageNum: 1\n          }\n        ) {\n          list {\n            scoreInfo {\n              place\n              score\n              totalPlaces\n              averageScore\n              placeDiff\n              placeAfterTour\n              pointsAfterTour\n              placeAfterTourDiff\n            }\n            squad {\n              name\n              id\n              user {\n                id\n                nick\n              }\n              benefit {\n                benefitType\n                isApply\n                isActive\n              }\n              seasonScoreInfo {\n                score\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLeagueSquadsCurrentTourInfo($leagueId: ID!, $seasonId: ID!) {\n    fantasyQueries {\n      rating {\n        squads(\n          input: {\n            leagueID: $leagueId\n            entityType: SEASON\n            entityID: $seasonId\n            sortOrder: ASC\n            pageSize: 90\n            pageNum: 1\n          }\n        ) {\n          list {\n            squad {\n              id\n              currentTourInfo {\n                isNotLimit\n                transfersDone\n                transfersLeft\n                currentBalance\n                totalPrice\n                players {\n                  isCaptain\n                  isViceCaptain\n                  isStarting\n                  substitutePriority\n                  points\n                  score\n                  isPointsCount\n                  playedMatchesTour\n                  seasonPlayer {\n                    id\n                    name\n                    role\n                    status {\n                      status\n                    }\n                    statObject {\n                      id\n                      firstName\n                      lastName\n                    }\n                    team {\n                      id\n                      name\n                      statObject {\n                        id\n                      }\n                      svgKit {\n                        url\n                      }\n                    }\n                  }\n                  statPlayer {\n                    points\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLeagueSquadsCurrentTourInfo($leagueId: ID!, $seasonId: ID!) {\n    fantasyQueries {\n      rating {\n        squads(\n          input: {\n            leagueID: $leagueId\n            entityType: SEASON\n            entityID: $seasonId\n            sortOrder: ASC\n            pageSize: 90\n            pageNum: 1\n          }\n        ) {\n          list {\n            squad {\n              id\n              currentTourInfo {\n                isNotLimit\n                transfersDone\n                transfersLeft\n                currentBalance\n                totalPrice\n                players {\n                  isCaptain\n                  isViceCaptain\n                  isStarting\n                  substitutePriority\n                  points\n                  score\n                  isPointsCount\n                  playedMatchesTour\n                  seasonPlayer {\n                    id\n                    name\n                    role\n                    status {\n                      status\n                    }\n                    statObject {\n                      id\n                      firstName\n                      lastName\n                    }\n                    team {\n                      id\n                      name\n                      statObject {\n                        id\n                      }\n                      svgKit {\n                        url\n                      }\n                    }\n                  }\n                  statPlayer {\n                    points\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSquadTourInfo($tourId: ID!, $squadId: ID!) {\n    fantasyQueries {\n      squadTourInfo(input: { tourID: $tourId, squadID: $squadId }) {\n        isNotLimit\n        transfersDone\n        transfersLeft\n        currentBalance\n        totalPrice\n        players {\n          isCaptain\n          isViceCaptain\n          isStarting\n          substitutePriority\n          points\n          score\n          isPointsCount\n          playedMatchesTour\n          seasonPlayer {\n            id\n            name\n            role\n            status {\n              status\n            }\n            statObject {\n              id\n              firstName\n              lastName\n            }\n            team {\n              id\n              name\n              statObject {\n                id\n              }\n              svgKit {\n                url\n              }\n            }\n          }\n          statPlayer {\n            points\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSquadTourInfo($tourId: ID!, $squadId: ID!) {\n    fantasyQueries {\n      squadTourInfo(input: { tourID: $tourId, squadID: $squadId }) {\n        isNotLimit\n        transfersDone\n        transfersLeft\n        currentBalance\n        totalPrice\n        players {\n          isCaptain\n          isViceCaptain\n          isStarting\n          substitutePriority\n          points\n          score\n          isPointsCount\n          playedMatchesTour\n          seasonPlayer {\n            id\n            name\n            role\n            status {\n              status\n            }\n            statObject {\n              id\n              firstName\n              lastName\n            }\n            team {\n              id\n              name\n              statObject {\n                id\n              }\n              svgKit {\n                url\n              }\n            }\n          }\n          statPlayer {\n            points\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetTour($id: ID!) {\n    fantasyQueries {\n      tour(id: $id) {\n        id\n        name\n        status\n        startedAt\n        finishedAt\n        transfersStartedAt\n        transfersFinishedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTour($id: ID!) {\n    fantasyQueries {\n      tour(id: $id) {\n        id\n        name\n        status\n        startedAt\n        finishedAt\n        transfersStartedAt\n        transfersFinishedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetTourMatches($id: ID!) {\n    fantasyQueries {\n      tour(id: $id) {\n        id\n        matches {\n          id\n          matchStatus\n          scheduledAt\n          currentTime\n          winner\n          periodId\n          hasLineups\n          home {\n            score\n            team {\n              id\n              name\n              logo {\n                main\n              }\n            }\n            lineup(skipPreview: true) {\n              player {\n                id\n              }\n              lineupStarting\n            }\n          }\n          away {\n            score\n            team {\n              id\n              name\n              logo {\n                main\n              }\n            }\n            lineup(skipPreview: true) {\n              player {\n                id\n              }\n              lineupStarting\n            }\n          }\n          prediction {\n            yellowCards\n            goals\n          }\n          bettingOdds(iso2Country: \"\", placementType: FANTASY_MATCH) {\n            line1x2 {\n              h\n              a\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTourMatches($id: ID!) {\n    fantasyQueries {\n      tour(id: $id) {\n        id\n        matches {\n          id\n          matchStatus\n          scheduledAt\n          currentTime\n          winner\n          periodId\n          hasLineups\n          home {\n            score\n            team {\n              id\n              name\n              logo {\n                main\n              }\n            }\n            lineup(skipPreview: true) {\n              player {\n                id\n              }\n              lineupStarting\n            }\n          }\n          away {\n            score\n            team {\n              id\n              name\n              logo {\n                main\n              }\n            }\n            lineup(skipPreview: true) {\n              player {\n                id\n              }\n              lineupStarting\n            }\n          }\n          prediction {\n            yellowCards\n            goals\n          }\n          bettingOdds(iso2Country: \"\", placementType: FANTASY_MATCH) {\n            line1x2 {\n              h\n              a\n            }\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;